LOAD CSV WITH HEADERS FROM 'https://raw.githubusercontent.com/DataScientest/JAN23_BDE_INT_Holiday_Itinerary/main/data/places_output.csv?token=GHSAT0AAAAAAB55ARCJMTR2L7NRCSWGGBPUZAGXUSA' AS row
CREATE (:POI {id: row.xid,
                    name:row.name,
                    url: row.url,
                    stars: row.stars,
                    wikipedia: row.wikipedia,
                    image: row.image,
                    address: row.address,
                    kind: row.kinds,
		    location: point({latitude: toFloat(row.lat), longitude: toFloat(row.lon)})
})

# set kind
MATCH (n:POI) WHERE n.kind CONTAINS "accomodations"  SET n.kind = "accommodation"
MATCH (n:POI) WHERE n.kind CONTAINS "religion"  SET n.kind = "religion"
MATCH (n:POI) WHERE n.kind CONTAINS "cultural"  SET n.kind = "cultural"
MATCH (n:POI) WHERE n.kind CONTAINS "foods"  SET n.kind = "food"

# create 7 Clusters for each day

MATCH (p:POI)
WITH p, rand() AS sortOrder
ORDER BY sortOrder
LIMIT 7
CREATE (d:Day)
SET d.location = p.location,
d.iterations = 0
RETURN *

# get cluster numbers

MATCH (d:Day)
WITH collect(d) AS days
UNWIND range(0, 7) AS day
SET (days[day]).itinerary_day = day + 1
RETURN days[day]

# assign to clusters

MATCH (p:POI), (d:Day)
WITH p, d ORDER BY point.distance(p.location, d.location)
WITH p, collect(d) AS days
SET p.itinerary_day = days[0].itinerary_day

# Move each centroid to the mean of the currently assigned items
MATCH (p:POI), (d:Day)
WHERE p.itinerary_day = d.itinerary_day
WITH d, avg(p.location.x) AS newX, avg(p.location.y) AS newY
SET d.location = point({x:newX, y:newY}),
d.iterations = d.iterations + 1

# Assign each item to the cluster with the nearest centroid
MATCH (p:POI), (d:Day)
WITH p, d ORDER BY distance(p.location, d.location)
WITH p, p.itinerary_day AS oldClusterNumber, collect(d) AS days
SET i.itinerary_day = days[0].itinerary_day
WITH p, oldClusterNumber
WHERE p.itinerary_day <> oldClusterNumber
WITH count(*) AS changedCount

# Move each centroid to the mean of the currently assigned items
MATCH (p:POI), (d:Day)
WHERE p.clusterNumber = d.clusterNumber
WITH changedCount, d, avg(p.location.x) AS newX, avg(p.location.y) AS newY
SET d.location = point({x:newX, y:newY}),
d.iterations = d.iterations + 1
RETURN changedCount, d.iterations AS iterations
LIMIT 1
_______

# create start + end node
CREATE (n:Start {name: "Start", itinerary_day: 1, location: point({latitude: 38.109493255615234, longitude: 13.345915794372559})})
CREATE (n:End {name: "End", itinerary_day: 7, location: point({latitude: 38.11233901977539, longitude: 13.358551979064941})})

# create relationships
#first relationship
MATCH (p1:Start)
MATCH (p2:POI {kind: "accommodation", itinerary_day: 1})
WITH point.distance(p1.location, p2.location) as distance, p1, p2
MERGE (p1)-[:ROUTE { value: distance }]-(p2)

....

# last relationship
MATCH (p1:POI {kind: "food", itinerary_day: 7})
MATCH (p2:End)
WITH point.distance(p1.location, p2.location) as distance, p1, p2
MERGE (p1)-[:ROUTE { value: distance }]-(p2)





